import telebot
import requests
import os
import threading
import time
from datetime import datetime

BOT_TOKEN = os.getenv("BOT_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
bot = telebot.TeleBot(BOT_TOKEN)

reminders = {}

# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Groq ---
def ask_groq(prompt):
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "llama3-70b-8192",
        "messages": [
            {"role": "system", "content": "–¢—ã –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π, —É–º–Ω—ã–π, —á—É—Ç–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–æ–º–æ–≥–∞–µ—à—å —Å –ø–ª–∞–Ω–∞–º–∏, –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º."},
            {"role": "user", "content": prompt}
        ]
    }
    response = requests.post("https://api.groq.com/openai/v1/chat/completions", headers=headers, json=data)
    result = response.json()
    return result["choices"][0]["message"]["content"] if "choices" in result else "–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò"

# --- –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞ ---
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ù–∞–ø–∏—à–∏ –º–Ω–µ –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.")

# --- –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
@bot.message_handler(commands=['–Ω–∞–ø–æ–º–Ω–∏'])
def remind_command(message):
    try:
        text = message.text.replace("/–Ω–∞–ø–æ–º–Ω–∏", "").strip()
        parts = text.split(" –≤ ")
        if len(parts) != 2:
            bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /–Ω–∞–ø–æ–º–Ω–∏ –°–¥–µ–ª–∞—Ç—å –∑–≤–æ–Ω–æ–∫ –≤ 14:30")
            return
        note, time_str = parts
        remind_time = datetime.strptime(time_str, "%H:%M").time()
        reminders[message.chat.id] = {"text": note, "time": remind_time}
        bot.reply_to(message, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: '{note}' –≤ {remind_time}")
    except Exception as e:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç /–Ω–∞–ø–æ–º–Ω–∏ [—Ç–µ–∫—Å—Ç] –≤ –ß–ß:–ú–ú")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@bot.message_handler(func=lambda message: True)
def chat(message):
    reply = ask_groq(message.text)
    bot.send_message(message.chat.id, reply)

# --- –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
def reminder_loop():
    while True:
        now = datetime.now().time()
        for chat_id, data in list(reminders.items()):
            if data["time"].hour == now.hour and data["time"].minute == now.minute:
                bot.send_message(chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {data['text']}")
                del reminders[chat_id]
        time.sleep(60)

threading.Thread(target=reminder_loop, daemon=True).start()

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
bot.polling(none_stop=True)
